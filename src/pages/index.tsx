import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import { EmojiPost } from "@prisma/client"; // Import the Post type asd
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();
    }
  });

  const [input, setInput] = useState("");

  console.log(user);

  if (!user) return null;

  return <div className="flex gap-3 w-full">
    <Image 
      src={user.profileImageUrl}
      alt="Profile Image" 
      className="w-14 h-14 rounded-full" 
      width={56} 
      height={56}
    />
  <input 
    placeholder="Type some emojis!" 
    className="grow bg-transparent outline-none" 
    type="text"
    value={input}
    onChange={(e) => setInput(e.target.value)}
    disabled={isPosting}
  />
  <button onClick={() => mutate({ content: input })}>Post</button>
    
  </div>
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];

const PostsView = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div key={post.id} className="flex p-4 gap-3 border-b border-slate-400">
      <Image 
        src={author.profilePicture} 
        className="h-14 w-14 rounded-full"
        alt={`@${author.username}'s profile picture`} 
        width={56} 
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex text-slate-300 gap-1">
          <span>
            {`@${author.username}`}
          </span>
          <span className="font-thin">
            {` Â· ${dayjs(post.createdAt).fromNow()} `}
          </span>
        </div>
        <div>
          <span className="text-2xl">{post.content}</span>
        </div>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong!</div>;

  return (
  <div className="flex flex-col">
    {data.map((fullPost) => (
      <PostsView {...fullPost} key={fullPost.post.id} />
    ))}
  </div>
  )
  

}

export default function Home() {

  const {isLoaded: userLoaded, isSignedIn } = useUser();

  //start fetching asap
  api.post.getAll.useQuery();

  //return empty div if user arent loaded
  if (!userLoaded) return <div />

  

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center bg-black text-slate-100">
        <div className="w-full h-full md:max-w-2xl border-slate-400 border-x">
          <div className="border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {!!isSignedIn && <CreatePostWizard />}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
}
